# Written by Sean Harris (snh0037@auburn.edu)
# Converts Akari puzzles and solutions in the format specified by Dr. Tauritz' Light-Up puzzle assignment to the format
# used by Simon Tatham's Portable Puzzle Collection for Light-Up, which is free, open-source, and available online at
# https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/lightup.html

import sys


# Loads a file in Dr. Tauritz' format at input_filename, and outputs a corresponding file in Tatham's format at
# output_filename. Note that the same code works for both puzzle files and solution files from the assignment.
def convert_file(input_filename, output_filename):
    with open(input_filename, "r") as file:
        width = int(file.readline())
        height = int(file.readline())

        walls = dict()
        light_text = list()
        parse_walls = True
        line_count = 2
        for line in file:
            try:
                # Switch to parsing lights if a single number for lit tiles is given.
                if len(line.split(" ")) == 1:
                    parse_walls = False
                    continue

                if parse_walls:
                    wall_x, wall_y, wall_constraint = line.split(" ")
                    # Tatham's format uses an origin of (0, 0) at the top left.
                    converted_x = int(wall_x) - 1
                    converted_y = (height - int(wall_y))
                    converted_constraint = str(int(wall_constraint))
                    if converted_constraint == "5":
                        converted_constraint = "B"
                    walls[(converted_x, converted_y)] = converted_constraint
                else:
                    light_x, light_y = line.split(" ")
                    converted_x = int(light_x) - 1
                    converted_y = (height - int(light_y))
                    # Lights are listed as a sequential series of moves "LX,Y" (marking as invalid is "IX,Y").
                    light_text.append(f"L{converted_x},{converted_y}")
                line_count += 1
            except Exception as exception:
                print(f"Error: parsing {input_filename} failed on line {line_count}!")
                raise exception
    print(f"Loaded in {width}x{height} puzzle from {input_filename}, {len(light_text)} lights placed.")

    # Save files need PARAMS pretending they were generated by Tatham's generator, but only dimensions are used.
    parameters = f"{width}x{height}b5s0d0"

    # DESC uses a character to represent a run of white spaces, with a = 1, b = 2, including wrapping.
    description = ""
    white_run = 0
    for y in range(height):
        for x in range(width):
            if (x, y) in walls:
                if white_run > 0:
                    description += int_to_letter(white_run)
                    white_run = 0
                description += walls[(x, y)]
            else:
                white_run += 1
    if white_run > 0:
        description += int_to_letter(white_run)

    # Tatham's file format uses an eight-character key, a number noting the character length of the value,
    # and then a value, delimited with ":".
    output_text = list()
    output_text.append("SAVEFILE:41:Simon Tatham's Portable Puzzle Collection\n")
    output_text.append("VERSION :1:1\n")
    output_text.append("GAME    :8:Light Up\n")

    # PARAMS and CPARAMS are identical and both needed, not sure why.
    output_text.append(f"PARAMS  :{len(parameters)}:{parameters}\n")
    output_text.append(f"CPARAMS :{len(parameters)}:{parameters}\n")

    output_text.append(f"DESC    :{len(description)}:{description}\n")

    # NSTATES is the number of states in the undo history, here the number of lights placed plus one for the start.
    # STATEPOS is the current location in the undo history, which here is the same as NSTATES so all lights are placed.
    # This and the lights below work correctly even for puzzle files, giving one state.
    states = str(len(light_text) + 1)
    output_text.append(f"NSTATES :{len(states)}:{states}\n")
    output_text.append(f"STATEPOS:{len(states)}:{states}\n")

    # Lights are listed as a sequential series of MOVEs "LX,Y" (marking as invalid is "IX,Y").
    for light in light_text:
        output_text.append(f"MOVE    :{len(light)}:{light}\n")

    with open(output_filename, "w+") as file:
        file.writelines(output_text)

    print(f'Successfully converted "{input_filename}" to "{output_filename}"!')


# a = 1, b = 2...
def int_to_letter(integer):
    return chr(ord("a") + integer - 1)


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print('Syntax: "python AkariConverter.py input_filename output_filename"')
        print("Converts an Light-Up puzzle or solution file from Dr. Tauritz' puzzle format to a save file for "
              "Simon Tatham's Portable Puzzle Collection "
              "(https://www.chiark.greenend.org.uk/~sgtatham/puzzles/js/lightup.html).")
        print("Use this to better visualize the puzzles or the solutions generated by your EA, "
              "or try solving the puzzles yourself!")
    else:
        input_filename = sys.argv[1]
        output_filename = sys.argv[2]
        convert_file(input_filename, output_filename)
